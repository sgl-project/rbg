/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// RoleBasedGroupSpecApplyConfiguration represents a declarative configuration of the RoleBasedGroupSpec type for use
// with apply.
type RoleBasedGroupSpecApplyConfiguration struct {
	Roles          []RoleSpecApplyConfiguration      `json:"roles,omitempty"`
	PodGroupPolicy *PodGroupPolicyApplyConfiguration `json:"podGroupPolicy,omitempty"`
}

// RoleBasedGroupSpecApplyConfiguration constructs a declarative configuration of the RoleBasedGroupSpec type for use with
// apply.
func RoleBasedGroupSpec() *RoleBasedGroupSpecApplyConfiguration {
	return &RoleBasedGroupSpecApplyConfiguration{}
}

// WithRoles adds the given value to the Roles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Roles field.
func (b *RoleBasedGroupSpecApplyConfiguration) WithRoles(values ...*RoleSpecApplyConfiguration) *RoleBasedGroupSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoles")
		}
		b.Roles = append(b.Roles, *values[i])
	}
	return b
}

// WithPodGroupPolicy sets the PodGroupPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodGroupPolicy field is set to the value of the last call.
func (b *RoleBasedGroupSpecApplyConfiguration) WithPodGroupPolicy(value *PodGroupPolicyApplyConfiguration) *RoleBasedGroupSpecApplyConfiguration {
	b.PodGroupPolicy = value
	return b
}
