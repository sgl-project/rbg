/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
	workloadsv1alpha1 "sigs.k8s.io/rbgs/api/workloads/v1alpha1"
)

// RoleSpecApplyConfiguration represents a declarative configuration of the RoleSpec type for use
// with apply.
type RoleSpecApplyConfiguration struct {
	Name            *string                                 `json:"name,omitempty"`
	Replicas        *int32                                  `json:"replicas,omitempty"`
	RolloutStrategy *RolloutStrategyApplyConfiguration      `json:"rolloutStrategy,omitempty"`
	RestartPolicy   *workloadsv1alpha1.RestartPolicyType    `json:"restartPolicy,omitempty"`
	Dependencies    []string                                `json:"dependencies,omitempty"`
	Workload        *WorkloadSpecApplyConfiguration         `json:"workload,omitempty"`
	Template        *v1.PodTemplateSpecApplyConfiguration   `json:"template,omitempty"`
	LeaderWorkerSet *LeaderWorkerTemplateApplyConfiguration `json:"leaderWorkerSet,omitempty"`
	ServicePorts    []corev1.ServicePort                    `json:"servicePorts,omitempty"`
	EngineRuntimes  []EngineRuntimeApplyConfiguration       `json:"engineRuntimes,omitempty"`
	ScalingAdapter  *ScalingAdapterApplyConfiguration       `json:"scalingAdapter,omitempty"`
}

// RoleSpecApplyConfiguration constructs a declarative configuration of the RoleSpec type for use with
// apply.
func RoleSpec() *RoleSpecApplyConfiguration {
	return &RoleSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithName(value string) *RoleSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithReplicas(value int32) *RoleSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithRolloutStrategy sets the RolloutStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RolloutStrategy field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithRolloutStrategy(value *RolloutStrategyApplyConfiguration) *RoleSpecApplyConfiguration {
	b.RolloutStrategy = value
	return b
}

// WithRestartPolicy sets the RestartPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestartPolicy field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithRestartPolicy(value workloadsv1alpha1.RestartPolicyType) *RoleSpecApplyConfiguration {
	b.RestartPolicy = &value
	return b
}

// WithDependencies adds the given value to the Dependencies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Dependencies field.
func (b *RoleSpecApplyConfiguration) WithDependencies(values ...string) *RoleSpecApplyConfiguration {
	for i := range values {
		b.Dependencies = append(b.Dependencies, values[i])
	}
	return b
}

// WithWorkload sets the Workload field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workload field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithWorkload(value *WorkloadSpecApplyConfiguration) *RoleSpecApplyConfiguration {
	b.Workload = value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithTemplate(value *v1.PodTemplateSpecApplyConfiguration) *RoleSpecApplyConfiguration {
	b.Template = value
	return b
}

// WithLeaderWorkerSet sets the LeaderWorkerSet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LeaderWorkerSet field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithLeaderWorkerSet(value *LeaderWorkerTemplateApplyConfiguration) *RoleSpecApplyConfiguration {
	b.LeaderWorkerSet = value
	return b
}

// WithServicePorts adds the given value to the ServicePorts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServicePorts field.
func (b *RoleSpecApplyConfiguration) WithServicePorts(values ...corev1.ServicePort) *RoleSpecApplyConfiguration {
	for i := range values {
		b.ServicePorts = append(b.ServicePorts, values[i])
	}
	return b
}

// WithEngineRuntimes adds the given value to the EngineRuntimes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EngineRuntimes field.
func (b *RoleSpecApplyConfiguration) WithEngineRuntimes(values ...*EngineRuntimeApplyConfiguration) *RoleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEngineRuntimes")
		}
		b.EngineRuntimes = append(b.EngineRuntimes, *values[i])
	}
	return b
}

// WithScalingAdapter sets the ScalingAdapter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScalingAdapter field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithScalingAdapter(value *ScalingAdapterApplyConfiguration) *RoleSpecApplyConfiguration {
	b.ScalingAdapter = value
	return b
}
