/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workloadsv1alpha1 "sigs.k8s.io/rbgs/api/workloads/v1alpha1"
)

// InstanceSpecApplyConfiguration represents a declarative configuration of the InstanceSpec type for use
// with apply.
type InstanceSpecApplyConfiguration struct {
	Components     []InstanceComponentApplyConfiguration        `json:"components,omitempty"`
	PodGroupPolicy *PodGroupPolicyApplyConfiguration            `json:"podGroupPolicy,omitempty"`
	ReadyPolicy    *workloadsv1alpha1.InstanceReadyPolicyType   `json:"readyPolicy,omitempty"`
	RestartPolicy  *workloadsv1alpha1.InstanceRestartPolicyType `json:"restartPolicy,omitempty"`
	ReadinessGates []InstanceReadinessGateApplyConfiguration    `json:"readinessGates,omitempty"`
}

// InstanceSpecApplyConfiguration constructs a declarative configuration of the InstanceSpec type for use with
// apply.
func InstanceSpec() *InstanceSpecApplyConfiguration {
	return &InstanceSpecApplyConfiguration{}
}

// WithComponents adds the given value to the Components field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Components field.
func (b *InstanceSpecApplyConfiguration) WithComponents(values ...*InstanceComponentApplyConfiguration) *InstanceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithComponents")
		}
		b.Components = append(b.Components, *values[i])
	}
	return b
}

// WithPodGroupPolicy sets the PodGroupPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodGroupPolicy field is set to the value of the last call.
func (b *InstanceSpecApplyConfiguration) WithPodGroupPolicy(value *PodGroupPolicyApplyConfiguration) *InstanceSpecApplyConfiguration {
	b.PodGroupPolicy = value
	return b
}

// WithReadyPolicy sets the ReadyPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadyPolicy field is set to the value of the last call.
func (b *InstanceSpecApplyConfiguration) WithReadyPolicy(value workloadsv1alpha1.InstanceReadyPolicyType) *InstanceSpecApplyConfiguration {
	b.ReadyPolicy = &value
	return b
}

// WithRestartPolicy sets the RestartPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestartPolicy field is set to the value of the last call.
func (b *InstanceSpecApplyConfiguration) WithRestartPolicy(value workloadsv1alpha1.InstanceRestartPolicyType) *InstanceSpecApplyConfiguration {
	b.RestartPolicy = &value
	return b
}

// WithReadinessGates adds the given value to the ReadinessGates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ReadinessGates field.
func (b *InstanceSpecApplyConfiguration) WithReadinessGates(values ...*InstanceReadinessGateApplyConfiguration) *InstanceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithReadinessGates")
		}
		b.ReadinessGates = append(b.ReadinessGates, *values[i])
	}
	return b
}
